"""
This type stub file was generated by pyright.
"""

import torch.nn as nn
from torch.cuda import amp
from yolov5.utils import TryExcept
from yolov5.utils.torch_utils import smart_inference_mode

"""
Common modules
"""
def autopad(k, p=..., d=...): # -> int | list[Unknown]:
    ...

class Conv(nn.Module):
    default_act = ...
    def __init__(self, c1, c2, k=..., s=..., p=..., g=..., d=..., act=...) -> None:
        ...
    
    def forward(self, x): # -> Any:
        ...
    
    def forward_fuse(self, x): # -> Any:
        ...
    


class DWConv(Conv):
    def __init__(self, c1, c2, k=..., s=..., d=..., act=...) -> None:
        ...
    


class DWConvTranspose2d(nn.ConvTranspose2d):
    def __init__(self, c1, c2, k=..., s=..., p1=..., p2=...) -> None:
        ...
    


class TransformerLayer(nn.Module):
    def __init__(self, c, num_heads) -> None:
        ...
    
    def forward(self, x):
        ...
    


class TransformerBlock(nn.Module):
    def __init__(self, c1, c2, num_heads, num_layers) -> None:
        ...
    
    def forward(self, x): # -> Any:
        ...
    


class Bottleneck(nn.Module):
    def __init__(self, c1, c2, shortcut=..., g=..., e=...) -> None:
        ...
    
    def forward(self, x): # -> Any:
        ...
    


class BottleneckCSP(nn.Module):
    def __init__(self, c1, c2, n=..., shortcut=..., g=..., e=...) -> None:
        ...
    
    def forward(self, x): # -> Any:
        ...
    


class CrossConv(nn.Module):
    def __init__(self, c1, c2, k=..., s=..., g=..., e=..., shortcut=...) -> None:
        ...
    
    def forward(self, x): # -> Any:
        ...
    


class C3(nn.Module):
    def __init__(self, c1, c2, n=..., shortcut=..., g=..., e=...) -> None:
        ...
    
    def forward(self, x): # -> Any:
        ...
    


class C3x(C3):
    def __init__(self, c1, c2, n=..., shortcut=..., g=..., e=...) -> None:
        ...
    


class C3TR(C3):
    def __init__(self, c1, c2, n=..., shortcut=..., g=..., e=...) -> None:
        ...
    


class C3SPP(C3):
    def __init__(self, c1, c2, k=..., n=..., shortcut=..., g=..., e=...) -> None:
        ...
    


class C3Ghost(C3):
    def __init__(self, c1, c2, n=..., shortcut=..., g=..., e=...) -> None:
        ...
    


class SPP(nn.Module):
    def __init__(self, c1, c2, k=...) -> None:
        ...
    
    def forward(self, x): # -> Any:
        ...
    


class SPPF(nn.Module):
    def __init__(self, c1, c2, k=...) -> None:
        ...
    
    def forward(self, x): # -> Any:
        ...
    


class Focus(nn.Module):
    def __init__(self, c1, c2, k=..., s=..., p=..., g=..., act=...) -> None:
        ...
    
    def forward(self, x): # -> Any:
        ...
    


class GhostConv(nn.Module):
    def __init__(self, c1, c2, k=..., s=..., g=..., act=...) -> None:
        ...
    
    def forward(self, x): # -> Tensor:
        ...
    


class GhostBottleneck(nn.Module):
    def __init__(self, c1, c2, k=..., s=...) -> None:
        ...
    
    def forward(self, x): # -> Any:
        ...
    


class Contract(nn.Module):
    def __init__(self, gain=...) -> None:
        ...
    
    def forward(self, x):
        ...
    


class Expand(nn.Module):
    def __init__(self, gain=...) -> None:
        ...
    
    def forward(self, x):
        ...
    


class Concat(nn.Module):
    def __init__(self, dimension=...) -> None:
        ...
    
    def forward(self, x): # -> Tensor:
        ...
    


class DetectMultiBackend(nn.Module):
    def __init__(self, weights=..., device=..., dnn=..., data=..., fp16=..., fuse=..., hf_token=...) -> None:
        ...
    
    def forward(self, im, augment=..., visualize=...):
        ...
    
    def from_numpy(self, x):
        ...
    
    def warmup(self, imgsz=...): # -> None:
        ...
    


class AutoShape(nn.Module):
    conf = ...
    iou = ...
    agnostic = ...
    multi_label = ...
    classes = ...
    max_det = ...
    amp = ...
    def __init__(self, model, verbose=...) -> None:
        ...
    
    @smart_inference_mode()
    def forward(self, ims, size=..., augment=..., profile=...): # -> Detections:
        ...
    


class Detections:
    def __init__(self, ims, pred, files, times=..., names=..., shape=...) -> None:
        ...
    
    @TryExcept('Showing images is not supported in this environment')
    def show(self, labels=...): # -> None:
        ...
    
    def save(self, labels=..., save_dir=..., exist_ok=...): # -> None:
        ...
    
    def crop(self, save=..., save_dir=..., exist_ok=...): # -> str | list[Unknown] | None:
        ...
    
    def render(self, labels=...): # -> Unknown:
        ...
    
    def pandas(self): # -> Self@Detections:
        ...
    
    def tolist(self): # -> list[Detections]:
        ...
    
    def print(self): # -> None:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self):
        ...
    


class Proto(nn.Module):
    def __init__(self, c1, c_=..., c2=...) -> None:
        ...
    
    def forward(self, x): # -> Any:
        ...
    


class Classify(nn.Module):
    def __init__(self, c1, c2, k=..., s=..., p=..., g=...) -> None:
        ...
    
    def forward(self, x): # -> Any:
        ...
    


