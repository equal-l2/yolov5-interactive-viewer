"""
This type stub file was generated by pyright.
"""

from yolov5.utils import TryExcept, threaded

"""
Plotting utils
"""
RANK = ...
class Colors:
    def __init__(self) -> None:
        ...
    
    def __call__(self, i, bgr=...): # -> tuple[int, int, int] | tuple[int, ...]:
        ...
    
    @staticmethod
    def hex2rgb(h): # -> tuple[int, ...]:
        ...
    


colors = ...
def check_pil_font(font=..., size=...): # -> FreeTypeFont | ImageFont | None:
    ...

class Annotator:
    def __init__(self, im, line_width=..., font_size=..., font=..., pil=..., example=...) -> None:
        ...
    
    def box_label(self, box, label=..., color=..., txt_color=...): # -> None:
        ...
    
    def masks(self, masks, colors, im_gpu, alpha=..., retina_masks=...): # -> None:
        """Plot masks at once.
        Args:
            masks (tensor): predicted masks on cuda, shape: [n, h, w]
            colors (List[List[Int]]): colors for predicted masks, [[r, g, b] * n]
            im_gpu (tensor): img is in cuda, shape: [3, h, w], range: [0, 1]
            alpha (float): mask transparency: 0.0 fully transparent, 1.0 opaque
        """
        ...
    
    def rectangle(self, xy, fill=..., outline=..., width=...): # -> None:
        ...
    
    def text(self, xy, text, txt_color=..., anchor=...): # -> None:
        ...
    
    def fromarray(self, im): # -> None:
        ...
    
    def result(self): # -> NDArray[Any]:
        ...
    


def feature_visualization(x, module_type, stage, n=..., save_dir=...): # -> None:
    """
    x:              Features to be visualized
    module_type:    Module type
    stage:          Module stage within model
    n:              Maximum number of feature maps to plot
    save_dir:       Directory to save results
    """
    ...

def hist2d(x, y, n=...): # -> Any:
    ...

def butter_lowpass_filtfilt(data, cutoff=..., fs=..., order=...): # -> NDArray[Any]:
    ...

def output_to_target(output, max_det=...): # -> Any:
    ...

@threaded
def plot_images(images, targets, paths=..., fname=..., names=...): # -> None:
    ...

def plot_lr_scheduler(optimizer, scheduler, epochs=..., save_dir=...): # -> None:
    ...

def plot_val_txt(): # -> None:
    ...

def plot_targets_txt(): # -> None:
    ...

def plot_val_study(file=..., dir=..., x=...): # -> None:
    ...

@TryExcept()
def plot_labels(labels, names=..., save_dir=...): # -> None:
    ...

def imshow_cls(im, labels=..., pred=..., names=..., nmax=..., verbose=..., f=...): # -> Path:
    ...

def plot_evolve(evolve_csv=...): # -> None:
    ...

def plot_results(file=..., dir=...): # -> None:
    ...

def profile_idetection(start=..., stop=..., labels=..., save_dir=...): # -> None:
    ...

def save_one_box(xyxy, im, file=..., gain=..., pad=..., square=..., BGR=..., save=...):
    ...

