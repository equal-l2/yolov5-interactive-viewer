"""
This type stub file was generated by pyright.
"""

import os
import warnings
import pkg_resources as pkg
import torch
from pathlib import Path
from torch.utils.tensorboard import SummaryWriter
from yolov5.utils.general import LOGGER, colorstr, cv2
from yolov5.utils.loggers.clearml.clearml_utils import ClearmlLogger
from yolov5.utils.loggers.neptune.neptune_utils import NeptuneLogger
from yolov5.utils.loggers.wandb.wandb_utils import WandbLogger
from yolov5.utils.plots import plot_images, plot_labels, plot_results
from yolov5.utils.torch_utils import de_parallel

"""
Logging utils
"""
LOGGERS = ...
RANK = ...
class Loggers:
    def __init__(self, save_dir=..., weights=..., opt=..., hyp=..., logger=..., include=..., mmdet_keys=..., class_names=...) -> None:
        ...
    
    @property
    def remote_dataset(self): # -> Any | dict[Unknown, Unknown] | dict[str, str] | None:
        ...
    
    def on_train_start(self): # -> None:
        ...
    
    def on_pretrain_routine_start(self): # -> None:
        ...
    
    def on_pretrain_routine_end(self, labels, names): # -> None:
        ...
    
    def on_train_batch_end(self, model, ni, imgs, targets, paths, vals): # -> None:
        ...
    
    def on_train_epoch_end(self, epoch): # -> None:
        ...
    
    def on_val_start(self): # -> None:
        ...
    
    def on_val_image_end(self, pred, predn, path, names, im): # -> None:
        ...
    
    def on_val_batch_end(self, batch_i, im, targets, paths, shapes, out): # -> None:
        ...
    
    def on_val_end(self, nt, tp, fp, p, r, f1, ap, ap50, ap_class, confusion_matrix): # -> None:
        ...
    
    def on_fit_epoch_end(self, vals, epoch, best_fitness, fi): # -> None:
        ...
    
    def on_model_save(self, last, epoch, final_epoch, best_fitness, fi): # -> None:
        ...
    
    def on_train_end(self, last, best, epoch, results): # -> None:
        ...
    
    def on_params_update(self, params: dict): # -> None:
        ...
    


class GenericLogger:
    """
    YOLOv5 General purpose logger for non-task specific logging
    Usage: from yolov5.utils.loggers import GenericLogger; logger = GenericLogger(...)
    Arguments
        opt:             Run arguments
        console_logger:  Console logger
        include:         loggers to include
    """
    def __init__(self, opt, console_logger, include=...) -> None:
        ...
    
    def log_metrics(self, metrics, epoch): # -> None:
        ...
    
    def log_images(self, files, name=..., epoch=...): # -> None:
        ...
    
    def log_graph(self, model, imgsz=...): # -> None:
        ...
    
    def log_model(self, model_path, epoch=..., metadata=...): # -> None:
        ...
    
    def update_params(self, params): # -> None:
        ...
    


def log_tensorboard_graph(tb, model, imgsz=...): # -> None:
    ...

def web_project_name(project): # -> LiteralString:
    ...

