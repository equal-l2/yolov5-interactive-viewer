"""
This type stub file was generated by pyright.
"""

"""
Model validation metrics
"""
def fitness(x):
    ...

def ap_per_class_box_and_mask(tp_m, tp_b, conf, pred_cls, target_cls, plot=..., save_dir=..., names=...): # -> dict[str, dict[str, ndarray[Any, dtype[float64]] | ndarray[Any, dtype[floating[Any]]] | Unknown]]:
    """
    Args:
        tp_b: tp of boxes.
        tp_m: tp of masks.
        other arguments see `func: ap_per_class`.
    """
    ...

class Metric:
    def __init__(self) -> None:
        ...
    
    @property
    def ap50(self): # -> list[Unknown]:
        """AP@0.5 of all classes.
        Return:
            (nc, ) or [].
        """
        ...
    
    @property
    def ap(self): # -> list[Unknown]:
        """AP@0.5:0.95
        Return:
            (nc, ) or [].
        """
        ...
    
    @property
    def mp(self): # -> float:
        """mean precision of all classes.
        Return:
            float.
        """
        ...
    
    @property
    def mr(self): # -> float:
        """mean recall of all classes.
        Return:
            float.
        """
        ...
    
    @property
    def map50(self): # -> float:
        """Mean AP@0.5 of all classes.
        Return:
            float.
        """
        ...
    
    @property
    def map(self): # -> float:
        """Mean AP@0.5:0.95 of all classes.
        Return:
            float.
        """
        ...
    
    def mean_results(self): # -> tuple[Unknown | float, Unknown | float, Unknown | float, Unknown | float]:
        """Mean of results, return mp, mr, map50, map"""
        ...
    
    def class_result(self, i): # -> tuple[Unknown, Unknown, Unknown, Unknown]:
        """class-aware result, return p[i], r[i], ap50[i], ap[i]"""
        ...
    
    def get_maps(self, nc): # -> NDArray[floating[Any]]:
        ...
    
    def update(self, results): # -> None:
        """
        Args:
            results: tuple(p, r, ap, f1, ap_class)
        """
        ...
    


class Metrics:
    """Metric for boxes and masks."""
    def __init__(self) -> None:
        ...
    
    def update(self, results): # -> None:
        """
        Args:
            results: Dict{'boxes': Dict{}, 'masks': Dict{}}
        """
        ...
    
    def mean_results(self): # -> tuple[Unknown | float, Unknown | float, Unknown | float, Unknown | float, Unknown | float, Unknown | float, Unknown | float, Unknown | float]:
        ...
    
    def class_result(self, i): # -> tuple[Unknown, Unknown, Unknown, Unknown, Unknown, Unknown, Unknown, Unknown]:
        ...
    
    def get_maps(self, nc): # -> NDArray[floating[Any]]:
        ...
    
    @property
    def ap_class_index(self): # -> list[Unknown]:
        ...
    


KEYS = ...
BEST_KEYS = ...
